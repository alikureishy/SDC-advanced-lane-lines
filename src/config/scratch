    "ThresholderExample": {
		"ToPlot": 1,
		"Term":
		{
			"ToPlot": 0,
			"Operator": "OR",
			"Operands": [
				{
					"ToPlot": 0,
					"Operator": "AND",
					"Operands": [
				    	{"SobelX": { "Kernel": 3, "MinMax": [0, 255], "ToPlot": 1}},
				    	{"SobelY": { "Kernel": 3, "MinMax": [0, 255], "ToPlot": 1}}
					]
				},
				{
					"ToPlot": 0,
					"Operator": "AND",
					"Operands": [
				    	{"SobelTanXY": {"Kernel": 3, "MinMax": [0, 1.57], "ToPlot": 1}},
				    	{"SobelXY": { "Kernel": 3, "MinMax": [0, 255], "ToPlot": 1}}
					]
				},
		    	{"Color": { "Space": "HLS", "Channel": 0, "MinMax": [0,255], "ToPlot": 1}}
			]
		}
    },
    
    
    "Thresholder": {
		"ToPlot": 1,
		"Term":
		{
			"ToPlot": 1,
			"Operator": "OR",
			"Operands": [
		    	{"SobelX": { "Kernel": 3, "MinMax": [20, 120], "ToPlot": 1}},
		    	{"SobelY": { "Kernel": 3, "MinMax": [20, 120], "ToPlot": 1}},
		    	{"SobelXY": { "Kernel": 3, "MinMax": [20, 120], "ToPlot": 1}},
		    	{"SobelTanXY": { "Kernel": 3, "MinMax": [0.0, 1.0], "ToPlot": 1}},
		    	{"Color": { "Space": "HLS", "Channel": 2, "MinMax": [20,120], "ToPlot": 1}}
			]
		}
    },
    
    
# This below worked for the transform of the image in /test_images/solidWhiteRight.jpg
    "Perspective": {
		"ToPlot": 1,
        "SrcPoints": [
        	[437, 341], 
        	[533, 341],
        	[136, 532],
        	[834, 532]
        ],
        "DestPoints": [
        	[246, 35],
        	[695, 35],
        	[246, 532],
        	[695, 532]
        ]
    },

# For the test videos -- Attept # 1 (Pretty good, but straight lines go apart at the top):
    "Perspective": {
		"ToPlot": 1,
        "SrcPoints": [
        	[597, 451], 
        	[659, 451],
        	[270, 692],
        	[1113, 692]
        ],
        "DestPoints": [
        	[422, 53],
        	[933, 53],
        	[422, 692],
        	[933, 692]
        ]
    },
    
    
			"Operands": [
				{
					"ToPlot": 1,
					"Operator": "AND",
					"Negate": 0,
					"Operands": [
				    	{"SobelX": { "Kernel": 5, "MinMax": [0,600], "ToPlot": 1}},
				    	{"SobelX": { "Kernel": 5, "MinMax": [-600,0], "ToPlot": 1}}
				    ]
				},
				{
					"ToPlot": 1,
					"Operator": "AND",
					"Negate": 0,
					"Operands": [
				    	{"Color": { "Space": "HSV", "Channel": 0, "MinMax": [0,40], "ToPlot": 1}},
				    	{"Color": { "Space": "HSV", "Channel": 1, "MinMax": [80,255], "ToPlot": 1}},
				    	{"Color": { "Space": "HSV", "Channel": 1, "MinMax": [200,255], "ToPlot": 1}}
				    ]
				}


    
    def blah(self):
        
        x_dim, y_dim = latest.shape[1], latest.shape[0]
        
        numslices = self.getparam(self.NumSlices)
        slicesize = int(y_dim / numslices)
        
        # Get a histogram of each horizontal slice and find peaks
        # Assumption is that the center of the center of the camera
        # is always soewhere between the left and right lanes.
        binary = np.array(latest).astype(bool)
        histimage = np.zeros_like(latest)
        leftbucket = []
        rightbucket = []
        for i in range(numslices):
            start, end = i*slicesize, min((i*slicesize)+slicesize, len(latest))
            histogram = np.sum(binary[start:end,:], axis=0)

            # Determine the position of the two lanes:
            center = int(x_dim / 2)
            leftpeaks = self.findpeaks(histogram[0:center]).reverse() # [(x, strength)]
            rightpeaks = self.findpeaks(histogram[center:]) # [(x, strength)]
            leftbucket.append(leftpeaks)
            rightbucket.append(rightpeaks)
            
            if self.isplotting():
                points = np.int32(list(zip(list(range(0, x_dim)), y_dim - histogram)))
                cv2.polylines(histimage, [points], False, 255, 5)


        # Calculate lines:
        

        if self.isplotting():
            self.__plot__(frame, histimage, 'gray', "Histogram", None)
        
        return latest
